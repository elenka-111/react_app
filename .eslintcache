[{"/home/lena/WebstormProjects/user-auth/src/index.js":"1","/home/lena/WebstormProjects/user-auth/src/components/Main.jsx":"2","/home/lena/WebstormProjects/user-auth/src/components/Footer.jsx":"3","/home/lena/WebstormProjects/user-auth/src/components/Header.jsx":"4","/home/lena/WebstormProjects/user-auth/src/components/AboutUser.jsx":"5","/home/lena/WebstormProjects/user-auth/src/components/NotFound.jsx":"6","/home/lena/WebstormProjects/user-auth/src/components/Registration.jsx":"7","/home/lena/WebstormProjects/user-auth/src/components/Auth.jsx":"8","/home/lena/WebstormProjects/user-auth/src/store/index.js":"9","/home/lena/WebstormProjects/user-auth/src/reducers/index.js":"10","/home/lena/WebstormProjects/user-auth/src/reducers/user.js":"11","/home/lena/WebstormProjects/user-auth/src/constants/index.js":"12","/home/lena/WebstormProjects/user-auth/src/actions/user.js":"13"},{"size":499,"mtime":1611137828187,"results":"14","hashOfConfig":"15"},{"size":3276,"mtime":1611308262808,"results":"16","hashOfConfig":"15"},{"size":319,"mtime":1611224132711,"results":"17","hashOfConfig":"15"},{"size":365,"mtime":1611299523487,"results":"18","hashOfConfig":"15"},{"size":1757,"mtime":1611305910303,"results":"19","hashOfConfig":"15"},{"size":126,"mtime":1611134352397,"results":"20","hashOfConfig":"15"},{"size":4741,"mtime":1611304306273,"results":"21","hashOfConfig":"15"},{"size":2561,"mtime":1611300184142,"results":"22","hashOfConfig":"15"},{"size":576,"mtime":1611238725658,"results":"23","hashOfConfig":"15"},{"size":293,"mtime":1611139895581,"results":"24","hashOfConfig":"15"},{"size":4118,"mtime":1611306210030,"results":"25","hashOfConfig":"15"},{"size":1159,"mtime":1611306209926,"results":"26","hashOfConfig":"15"},{"size":6505,"mtime":1611306430653,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"3zilx8",{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},"/home/lena/WebstormProjects/user-auth/src/index.js",[],["59","60"],"/home/lena/WebstormProjects/user-auth/src/components/Main.jsx",["61","62"],"/home/lena/WebstormProjects/user-auth/src/components/Footer.jsx",[],"/home/lena/WebstormProjects/user-auth/src/components/Header.jsx",[],"/home/lena/WebstormProjects/user-auth/src/components/AboutUser.jsx",[],"/home/lena/WebstormProjects/user-auth/src/components/NotFound.jsx",[],"/home/lena/WebstormProjects/user-auth/src/components/Registration.jsx",["63"],"import React from \"react\";\nimport {Link, Redirect} from \"react-router-dom\"\nimport { connect } from 'react-redux';\nimport {bindActionCreators} from \"redux\";\nimport userActionsCreators from \"../actions/user\";\n\n\n\nclass Registration extends React.Component{\n    constructor() {\n        super();\n    }\n\n\n    render() {\n        if (this.props.user.isUserCreating) {\n            return <p>Регистрация.....</p>\n        } else if (this.props.user.userCreateSuccess) {\n            alert(\"Регистрация прошла успешно!\");\n            return <Redirect to='/login'/>\n        } else if (this.props.user.errMsg) {\n            alert(\"Ошибка, проверьте корректность ввода и попробуйте еще раз.\");\n            this.props.actions.clearState();\n        }\n        return (\n            <>\n                <h3>Регистрация нового пользователя</h3>\n                <p>Если у Вас уже есть аккаунт, то\n                    <Link to={\"/login/\"}> авторизуйтесь</Link></p>\n                <form className={\"form\"}>\n                    <div className=\"form-group\">\n                        <label>Email адрес</label>\n                        <input type=\"email\" className=\"form-control\" onChange={event => {\n                            this.props.actions.saveUserLoginValue(event.target.value);\n                        }}\n                               aria-describedby=\"emailHelp\" placeholder=\"Email\"/>\n                        <small className=\"form-text text-muted\">Ваш email является Вашим логином</small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Пароль</label>\n                        <input type=\"password\" className=\"form-control\" onChange={event => {\n                            this.props.actions.saveUserPasswordValue(event.target.value);\n                        }}\n                               placeholder=\"Пароль\"/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Телефон в международном формате</label>\n                        <input type=\"еуче\" className=\"form-control\" onChange={event => {\n                            this.props.actions.saveUserPhoneValue(event.target.value);\n                        }}\n                               placeholder=\"+79999999999\"/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Пригласительный код</label>\n                        <input type=\"text\" className=\"form-control\" onChange={event => {\n                            this.props.actions.saveUserInvitedValue(event.target.value);\n                        }}\n                               placeholder=\"Пригласительный код\"/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Имя</label>\n                        <input type=\"text\" className=\"form-control\" onChange={event => {\n                            this.props.actions.saveUserNameValue(event.target.value);\n                        }}\n                               placeholder=\"Имя\"/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Фамилия</label>\n                        <input type=\"text\" className=\"form-control\" onChange={event => {\n                            this.props.actions.saveUserSurnameValue(event.target.value);\n                        }}\n                               placeholder=\"Фамилия\"/>\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Код страны</label>\n                        <input type=\"text\" className=\"form-control\" onChange={event => {\n                            this.props.actions.saveUserCountryKeyValue(event.target.value);\n                        }}\n                               placeholder=\"Код страны\"/>\n                    </div>\n                    <button className=\"btn btn-primary\" onClick={event => {\n                        this.props.actions.createUser();\n                    }}>Зарегистрироваться\n                    </button>\n                </form>\n            </>\n\n        )\n\n\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        ...state,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        actions: bindActionCreators(userActionsCreators, dispatch),\n    }\n};\n\nconst Wrapped = connect(mapStateToProps, mapDispatchToProps)(Registration);\n\n\nexport default Wrapped;","/home/lena/WebstormProjects/user-auth/src/components/Auth.jsx",["64"],"import React from \"react\";\nimport {bindActionCreators} from \"redux\";\nimport userActionsCreators from \"../actions/user\";\nimport {connect} from \"react-redux\";\nimport {Link, Redirect} from \"react-router-dom\";\n\nclass Auth extends React.Component{\n    constructor() {\n        super();\n    }\n\n    render() {\n        if (this.props.user.isTryToLogin) {\n            return <p>Попытка залогиниться...</p>\n        } else if (this.props.user.isLoggedIn) {\n            console.log(\"Успешно авторизовался\");\n            return <Redirect to=\"/\"/>\n        } else if (this.props.user.errMsg) {\n            alert(\"Ошибка, проверьте правильность ввода данных\");\n            this.props.actions.clearState();\n        }\n        return (\n            <div>\n                <h3>Авторизация</h3>\n                <p>Если у Вас еще нет аккаунта, <Link to={\"/signup/\"}>зарегистрируйтесь</Link></p>\n                <form className={\"form\"}>\n                    <div className=\"form-group\">\n                        <label>Email адрес</label>\n                        <input type=\"email\" className=\"form-control\" onChange={event => {\n                            this.props.actions.saveUserLoginValue(event.target.value);\n                        }}\n                               aria-describedby=\"emailHelp\" placeholder=\"Email\"/>\n                        <small className=\"form-text text-muted\">Ваш email является Вашим логином</small>\n                    </div>\n                    <div className=\"form-group\">\n                        <label>Пароль</label>\n                        <input type=\"password\" className=\"form-control\" onChange={event => {\n                            this.props.actions.saveUserPasswordValue(event.target.value);\n                        }}\n                               placeholder=\"Пароль\"/>\n                    </div>\n                    <button className=\"btn btn-primary\" onClick={event => {\n                        this.props.actions.onLogin();\n                    }}>Авторизоваться\n                    </button>\n                </form>\n            </div>\n        )\n    }\n\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        ...state,\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        actions: bindActionCreators(userActionsCreators, dispatch),\n    }\n};\n\nconst Wrapped = connect(mapStateToProps, mapDispatchToProps)(Auth);\n\n\nexport default Wrapped;","/home/lena/WebstormProjects/user-auth/src/store/index.js",[],"/home/lena/WebstormProjects/user-auth/src/reducers/index.js",[],"/home/lena/WebstormProjects/user-auth/src/reducers/user.js",["65","66","67"],"import * as constants from \"../constants\";\n\nconst initialState = {\n    userLogin: \"\",\n    userPassword: \"\",\n    phone : \"\",\n    invited_by: \"\",\n    userName: \"\",\n    userSurname: \"\",\n    country_key: \"\",\n    user:{},\n\n    error401: false,\n    isTryToLogin: false,\n    isLoggedIn: false,\n    isUserLoading: false,\n    isUserCreating: false,\n    userCreateSuccess: false,\n    userCreateFail: false,\n    errMsg: \"\",\n};\n\nexport default function userReducer(state = initialState, action) {\n    switch (action.type) {\n        case constants.USER_ALREADY_LOGIN:\n            return {\n                ...state,\n                isLoggedIn: true,\n            }\n        case constants.USER_INPUT_PASSWORD_CHANGED:\n            return {\n                ...state,\n                userPassword: action.payload,\n            };\n\n        case constants.USER_INPUT_LOGIN_CHANGED:\n            return {\n                ...state,\n                userLogin: action.payload,\n            };\n        case constants.USER_INPUT_PHONE_CHANGED:\n            return {\n                ...state,\n                phone: action.payload,\n            };\n        case constants.USER_INPUT_NAME_CHANGED:\n            return {\n                ...state,\n                userName: action.payload,\n            };\n        case constants.USER_INPUT_INVITED_CHANGED:\n            return {\n                ...state,\n                invited_by: action.payload,\n            };\n        case constants.USER_INPUT_COUNTRY_KEY_CHANGED:\n            return {\n                ...state,\n                country_key: action.payload,\n            };\n        case constants.USER_INPUT_SURNAME_CHANGED:\n            return {\n                ...state,\n                userSurname: action.payload,\n            };\n        case constants.USER_INPUT_INVITED_CHANGED:\n            return {\n                ...state,\n                userSurname: action.payload,\n            };\n        case constants.USER_INPUT_COUNTRY_KEY_CHANGED:\n            return {\n                ...state,\n                userSurname: action.payload,\n            };\n        case constants.USER_CLEAR_STATE:\n            return {\n                ...state,\n                userCreateSuccess: false,\n                errMsg: '',\n            }\n        case constants.USER_TRY_TO_LOG_IN:\n            const login = state.userLogin;\n            return {\n                ...state,\n                isTryToLogin: true,\n                errMsg:''\n            };\n        case constants.USER_LOG_IN_SUCCESS:\n            return {\n                ...state,\n                isTryToLogin:false,\n                isLoggedIn: true,\n                errMsg:''\n            };\n        case constants.USER_LOG_IN_FAILED:\n            return {\n                ...state,\n                isTryToLogin: false,\n                isLoggedIn: false,\n                errMsg:action.payload,\n            };\n\n        case constants.USER_TRY_TO_CREATE:\n            return {\n                ...state,\n                isUserCreating: true,\n                userCreateSuccess: false,\n                errMsg: '',\n            };\n        case constants.USER_CREATE_FAIL:\n            return {\n                ...state,\n                errMsg: action.payload,\n                userCreateSuccess: false,\n                isUserCreating: false,\n            };\n        case constants.USER_CREATE_SUCCESS:\n            return {\n                ...state,\n                isUserCreating: false,\n                userCreateSuccess: true,\n                errMsg:''\n            };\n\n        case constants.GET_USER_LOADING:\n            return {\n                ...state,\n                isUserLoading: true,\n                errMsg:''\n            };\n\n        case constants.GET_USER_SUCCESS:\n            return {\n                ...state,\n                user: action.payload,\n                isUserLoading: false,\n                errMsg:''\n            };\n\n        case constants.GET_USER_FAIL:\n            return {\n                ...state,\n                errMsg: action.payload,\n                isUserLoading: false,\n            };\n\n        default:\n            return state;\n    }\n}\n","/home/lena/WebstormProjects/user-auth/src/constants/index.js",[],"/home/lena/WebstormProjects/user-auth/src/actions/user.js",["68","69","70"],"import * as constants from '../constants';\nimport axios from 'axios';\n\nexport default {\n    saveUserLoginValue(value) {\n        return {\n            type: constants.USER_INPUT_LOGIN_CHANGED,\n            payload: value,\n        };\n    },\n    saveUserPasswordValue(value) {\n        return {\n            type: constants.USER_INPUT_PASSWORD_CHANGED,\n            payload: value,\n        };\n    },\n    saveUserPhoneValue(value) {\n        return {\n            type: constants.USER_INPUT_PHONE_CHANGED,\n            payload: value,\n        };\n    },\n    saveUserInvitedValue(value) {\n        return {\n            type: constants.USER_INPUT_INVITED_CHANGED,\n            payload: value,\n        };\n    },\n    saveUserNameValue(value){\n        return {\n            type: constants.USER_INPUT_NAME_CHANGED,\n            payload: value,\n        };\n    },\n    saveUserSurnameValue(value){\n        return {\n            type: constants.USER_INPUT_SURNAME_CHANGED,\n            payload: value,\n        };\n    },\n    saveUserCountryKeyValue(value){\n        return {\n            type: constants.USER_INPUT_COUNTRY_KEY_CHANGED,\n            payload: value,\n        };\n    },\n    userAlreadyLogin() {\n        return {\n            type: constants.USER_ALREADY_LOGIN,\n        };\n    },\n\n    onLogin() {\n        return async (dispatch, getStore) => {\n            const store = getStore();\n            dispatch({\n                type: constants.USER_TRY_TO_LOG_IN,\n            });\n\n            try {\n                const response = await axios.post(\n                    'http://erp.apptrix.ru/api/clients/token/',\n                    {\n                        \"username\" : store.user.userLogin,\n                        \"password\" : store.user.userPassword\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json',\n                        }\n                    });\n                localStorage.setItem('access_token', response.data.access);\n                localStorage.setItem('refresh_token', response.data.refresh);\n                localStorage.setItem('client_id', response.data[\"client_id\"]);\n\n                dispatch({\n                    type: constants.USER_LOG_IN_SUCCESS,\n                    payload: response.data\n                })\n            } catch (e) {\n                dispatch({\n                    type: constants.USER_LOG_IN_FAILED,\n                    payload: e.message,\n                });\n            }\n        };\n    },\n    clearState(){\n        return {\n            type: constants.USER_CLEAR_STATE\n        };\n    },\n    createUser(){\n        return async (dispatch, getStore) => {\n            const store = getStore();\n            dispatch({\n                type: constants.USER_TRY_TO_CREATE,\n            });\n\n            try {\n                const response = await axios.post(\n                    'http://erp.apptrix.ru/api/clients/create/',\n                    {\n                        user : {\n                            email: store.user.userLogin,\n                            password: store.user.userPassword\n                        },\n                        phone : store.user.phone,\n                        invited_by: store.user.invited_by,\n                        name: store.user.userName,\n                        surname: store.user.userSurname,\n                        country_key: store.user.country_key\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json',\n                        }\n                    });\n                dispatch({\n                    type: constants.USER_CREATE_SUCCESS,\n                    payload: response.data\n                })\n            } catch (e) {\n\n                dispatch({\n                    type: constants.USER_CREATE_FAIL,\n                    payload: e.message,\n                });\n            }\n        };\n    },\n    fetchUser() {\n\n        return async (dispatch, getStore) => {\n            const store = getStore();\n            dispatch({\n                type: constants.GET_USER_LOADING,\n            });\n\n            let accessToken = localStorage.getItem('access_token');\n            let clientId = localStorage.getItem('client_id');\n            console.log(\"in fetch user\", accessToken);\n            try {\n                const response = await axios.get(\n                    'http://erp.apptrix.ru/api/clients/'+clientId,\n                    {\n                    method: 'GET',\n                    headers: {\n                        'Authorization': `Bearer ${accessToken}`,\n                        'content-type': 'application/json',\n                    }\n                });\n                dispatch({\n                    type: constants.GET_USER_SUCCESS,\n                    payload: response.data\n                })\n            } catch (e) {\n                dispatch({\n                    type: constants.GET_USER_FAIL,\n                    payload: e.message,\n                });\n            }\n\n        };\n    },\n    refreshToken(){\n        return async (dispatch, getStore) => {\n            const store = getStore();\n            dispatch({\n                type: constants.USER_TRY_TO_RELOG_IN,\n            });\n\n            let refreshToken = localStorage.getItem('refresh_token');\n            try {\n                const response = await axios.post(\n                    'http://erp.apptrix.ru/api/clients/token/refresh/',\n                    {\n                        \"refresh\" : refreshToken\n                    },\n                    {\n                        headers: {\n                            'Content-Type': 'application/json',\n                        }\n                    });\n                localStorage.setItem('access_token', response.data.access);\n                localStorage.setItem(\"error_401\", \"false\");\n\n                dispatch({\n                    type: constants.USER_LOG_IN_SUCCESS,\n                    payload: response.data\n                })\n            } catch (e) {\n                localStorage.clear();\n                dispatch({\n                    type: constants.USER_LOG_IN_FAILED,\n                    payload: e.message,\n                });\n            }\n        };\n    }\n\n}\n\n\n\naxios.interceptors.response.use(response => {\n    return response;\n}, error => {\n    if (error.response.status === 401) {\n        console.log(\"get error 401\");\n        localStorage.setItem(\"error_401\", \"true\");\n    }\n    return error;\n});\n\n\n\n\n\n\n",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":2,"column":9,"nodeType":"77","messageId":"78","endLine":2,"endColumn":13},{"ruleId":"79","severity":1,"message":"80","line":18,"column":5,"nodeType":"81","messageId":"82","endLine":21,"endColumn":6},{"ruleId":"79","severity":1,"message":"80","line":10,"column":5,"nodeType":"81","messageId":"82","endLine":12,"endColumn":6},{"ruleId":"79","severity":1,"message":"80","line":8,"column":5,"nodeType":"81","messageId":"82","endLine":10,"endColumn":6},{"ruleId":"83","severity":1,"message":"84","line":66,"column":9,"nodeType":"85","messageId":"86","endLine":70,"endColumn":15},{"ruleId":"83","severity":1,"message":"84","line":71,"column":9,"nodeType":"85","messageId":"86","endLine":75,"endColumn":15},{"ruleId":"75","severity":1,"message":"87","line":83,"column":19,"nodeType":"77","messageId":"78","endLine":83,"endColumn":24},{"ruleId":"88","severity":1,"message":"89","line":4,"column":1,"nodeType":"90","endLine":202,"endColumn":2},{"ruleId":"75","severity":1,"message":"91","line":135,"column":19,"nodeType":"77","messageId":"78","endLine":135,"endColumn":24},{"ruleId":"75","severity":1,"message":"91","line":168,"column":19,"nodeType":"77","messageId":"78","endLine":168,"endColumn":24},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-duplicate-case","Duplicate case label.","SwitchCase","unexpected","'login' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'store' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]